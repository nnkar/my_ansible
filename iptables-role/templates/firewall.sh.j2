#!/bin/bash

#################################################################################################
# версия 3.0 какая то
# Николай Карчевский nikolay.karchevskiy@gmail.com
#################################################################################################

#################################################################################################
# Всевозможные переменные описывающие интерфейсы и дополнительные ip
#################################################################################################

# Путь к дополнительным файлам
PATH_FILES="/scripts/iptables/list_files"
 [ -d "$PATH_FILES" ] || echo "FOLDER $PATH_FILES NOT FOUND"
# Список файлов в массив для разрешения доступа/ для массовой обработки
LIST_FILES=([0]="allow_ip" [1]="deny_ip" [2]="sshban_ip");

#eth0 ens18 и
    LAN_IP1="{{ lan_ip_host }}"
    LAN_IF1="{{ lan_if_host }}"
    LAN_NET1=""
    LAN_BRD1=""
    LAN_MAC1="{{ mac_host }}"

    INET_IP1="{{ inet_ip_host }}"
    INET_IF1="{{ inet_if_host }}"

########################################
    HOSTNAME=$(hostname)
    REZERV_IP="{{ rezerv1_ip_host }}"
    REZERV_IP2="{{ rezerv2_ip_host }}"
    ALL="0/0"
    
#LoopBack
    LO_IF="lo"
    LO_IP="127.0.0.1"

# Расположение IPTABLES
   IPT=$(which iptables)
   IP6TABLES=$(which ip6tables)
   IPS=$(which ipset)
   MODPROBE=$(which modprobe)
   RMMOD=$(which rmmod)
   ARP=$(which arp)

# Порты
   MULTIPOTR_OPEN_TCP="{{ open_ports_tcp }}"
   MULTIPORT_OPEN_UDP="{{ open_ports_udp }}"
   HTTP_PORT="80,443"
   PORT_DNS="53"
   PORT_DHCP="67"
   PORT_SSH="22"
   PORT_PRIV="1000:1023"
   PORT_UNPRIV="1024:65535"
   
# Defaults for rate limiting
#------------------------------------------------------------------------------
   RLIMIT="-m limit --limit 3/s --limit-burst 30"

#################################################################################################
# конец секции объявления переменных
#################################################################################################

# ф-я времени
fn_date_time () 
{ 
DATE=`date '+%Y-%m-%d'` 
TIME=`date '+%H:%M:%S'` 
} 

# Загружаем модули 
$MODPROBE ip_tables
$MODPROBE ip_conntrack
$MODPROBE iptable_filter
$MODPROBE iptable_mangle
$MODPROBE iptable_nat
$MODPROBE ipt_LOG
$MODPROBE ipt_limit
$MODPROBE ipt_state
$MODPROBE ip_nat_ftp
$MODPROBE ipt_recent
$MODPROBE ipt_REJECT
$MODPROBE ip_conntrack_netbios_ns
$MODPROBE ip_conntrack_ftp
$MODPROBE ip_conntrack_irc

#----------------------Дополнительно-----------------------#

# Разрешаем 1 прохождение пакетов или запрещаем 0
# 
# echo 1 > /proc/sys/net/ipv4/ip_forward
echo 0 > /proc/sys/net/ipv4/ip_forward

# Enable IP spoofing protection
for i in /proc/sys/net/ipv4/conf/*/rp_filter; do echo 1 > $i; done

# Enable tcp SYN Cookie Protection (SYN flood attacks)
echo 1 > /proc/sys/net/ipv4/tcp_syncookies

# Ignore all incoming ICMP echo requests
echo 0 > /proc/sys/net/ipv4/icmp_echo_ignore_all

# Ignore ICMP echo requests to broadcast
echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts

# Log packets with impossible addresses.
for i in /proc/sys/net/ipv4/conf/*/log_martians; do echo 1 > $i; done

# Don't log invalid responses to broadcast
echo 1 > /proc/sys/net/ipv4/icmp_ignore_bogus_error_responses

# Don't accept or send ICMP redirects.
for i in /proc/sys/net/ipv4/conf/*/accept_redirects; do echo 0 > $i; done
for i in /proc/sys/net/ipv4/conf/*/send_redirects; do echo 0 > $i; done

# Don't accept source routed packets.
for i in /proc/sys/net/ipv4/conf/*/accept_source_route; do echo 0 > $i; done

# Disable multicast routing
for i in /proc/sys/net/ipv4/conf/*/mc_forwarding; do echo 0 > $i; done

# Disable proxy_arp.
for i in /proc/sys/net/ipv4/conf/*/proxy_arp; do echo 0 > $i; done

# Enable secure redirects, i.e. only accept ICMP redirects for gateways
# Helps against MITM attacks.
for i in /proc/sys/net/ipv4/conf/*/secure_redirects; do echo 1 > $i; done

# Disable bootp_relay
for i in /proc/sys/net/ipv4/conf/*/bootp_relay; do echo 0 > $i; done

#очередь полуоткрытых соединений  def = 1024
echo "20000" > /proc/sys/net/ipv4/tcp_max_syn_backlog

#время ожидания соединения
echo "1" > /proc/sys/net/ipv4/tcp_synack_retries

#время сохранения сокета в состоянии FIN-WAIT-2 после его закрытия локальной стороной def= 60
 echo "30" > /proc/sys/net/ipv4/tcp_fin_timeout          

#задаем число передач проб keepalive, после которого соединение считается разорванным. По умолчанию передается 9 проб.
echo "5" > /proc/sys/net/ipv4/tcp_keepalive_probes

#определяем интервал передачи проб. Произведение tcp_keepalive_probes * tcp_keepalive_intvl определяет время, по истечении 
#которого соединение будет разорвано при отсутствии откликов. По умолчанию установлен интервал 75 секунд
echo "15" > /proc/sys/net/ipv4/tcp_keepalive_intvl

#максимальное количество пакетов в очередь на обработку def = 1000
echo "20000" > /proc/sys/net/core/netdev_max_backlog

#Максимальное число открытых сокетов, ждущих соединения. def = 1024
echo "20000" > /proc/sys/net/core/somaxconn

# запрещаем 1 ipv6 или разрешаем 0
echo 0 > /proc/sys/net/ipv6/conf/all/disable_ipv6



#################################################################################################
# очищаем и задаем политики по умолчанию
#################################################################################################
# Политики по умолчанию
    $IPT -P INPUT ACCEPT # сперва разрешаем все входящие, чтоб не обрывалось соединение
    $IPT -P OUTPUT ACCEPT
    $IPT -P FORWARD DROP
# разрешаем все в таблицах перенаправления
    $IPT -t nat -P PREROUTING ACCEPT
    $IPT -t nat -P POSTROUTING ACCEPT
    $IPT -t nat -P OUTPUT ACCEPT
# сброс к дефолтным настойкам
    $IPT -t mangle -P PREROUTING ACCEPT
    $IPT -t mangle -P OUTPUT ACCEPT
    $IPT -t mangle -P INPUT ACCEPT
    $IPT -t mangle -P FORWARD ACCEPT
    $IPT -t mangle -P POSTROUTING ACCEPT
# очищаем все фильтры
    $IPT -F
    $IPT -t nat -F
    $IPT -t mangle -F
# сбрасываем настройки на дефолтные
    $IPT -X
    $IPT -t nat -X
    $IPT -t mangle -X
# Zero all packets and counters.
    $IPT -Z
    $IPT -t nat -Z
    $IPT -t mangle -Z
# Разрешаем все на localhost
    $IPT -A INPUT -i $LO_IF -j ACCEPT
    $IPT -A OUTPUT -o $LO_IF -j ACCEPT
# очиска ipset
    $IPS -X sshban
    $IPS -X wlist

echo "ochistka end"

   $IPT -A INPUT -i $LAN_IF1 -s $REZERV_IP -p tcp -m state --state NEW --dport $PORT_SSH -j ACCEPT
   $IPT -A INPUT -i $LAN_IF1 -s $REZERV_IP2 -p tcp -m state --state NEW --dport $PORT_SSH -j ACCEPT

# Completely disable IPv6.
#------------------------------------------------------------------------------

# Block all IPv6 traffic
# If the ip6tables command is available, try to block all IPv6 traffic.
if test -x $IP6TABLES; then
	# Set the default policies
	# drop everything
	$IP6TABLES -P INPUT DROP 2>/dev/null
	$IP6TABLES -P FORWARD DROP 2>/dev/null
	$IP6TABLES -P OUTPUT DROP 2>/dev/null

	# The mangle table can pass everything
	$IP6TABLES -t mangle -P PREROUTING ACCEPT 2>/dev/null
	$IP6TABLES -t mangle -P INPUT ACCEPT 2>/dev/null
	$IP6TABLES -t mangle -P FORWARD ACCEPT 2>/dev/null
	$IP6TABLES -t mangle -P OUTPUT ACCEPT 2>/dev/null
	$IP6TABLES -t mangle -P POSTROUTING ACCEPT 2>/dev/null

	# Delete all rules.
	$IP6TABLES -F 2>/dev/null
	$IP6TABLES -t mangle -F 2>/dev/null

	# Delete all chains.
	$IP6TABLES -X 2>/dev/null
	$IP6TABLES -t mangle -X 2>/dev/null

	# Zero all packets and counters.
	$IP6TABLES -Z 2>/dev/null
	$IP6TABLES -t mangle -Z 2>/dev/null
fi   
#################################################################################################
# НАЧАЛО СОЗДАЕМ ЦЕПОЧКИ ПРАВИЛ
#################################################################################################
# Создание и очистка цепочек

# Цепочки для проверки пакетов #
   $IPT -N check_packets
   $IPT -F check_packets
 # защита от спуфинга
   $IPT -A check_packets -m conntrack --ctstate NEW,INVALID -p tcp --tcp-flags SYN,ACK SYN,ACK -j REJECT --reject-with tcp-reset
 # Скрытое сканирование
   $IPT -A check_packets -m limit --limit 1/sec --limit-burst 10 -p tcp --tcp-flags ACK,FIN FIN -j LOG --log-prefix "iptables: Stealth scan:"
   $IPT -A check_packets -p tcp --tcp-flags ACK,FIN FIN -j DROP
 # If we would use NAT, INVALID packets would pass - BLOCK them anyways
   $IPT -A check_packets -p tcp --tcp-flags ALL NONE -j DROP
   $IPT -A check_packets -p tcp --tcp-flags FIN,SYN FIN,SYN -j DROP
   $IPT -A check_packets -p tcp --tcp-flags FIN,RST FIN,RST -j DROP
   $IPT -A check_packets -p tcp --tcp-flags ACK,URG URG -j DROP
   $IPT -A check_packets -p tcp --tcp-flags ACK,PSH PSH -j DROP
   $IPT -A check_packets -p tcp --tcp-flags ALL FIN,PSH,URG -j DROP
   $IPT -A check_packets -p tcp --tcp-flags ALL SYN,FIN,PSH,URG -j DROP
 # дроп соединений начинающихся не с син
   $IPT -A check_packets -p tcp ! --syn -m state --state NEW -j DROP
   $IPT -A check_packets -p tcp --tcp-flags ALL FIN,URG,PSH -j DROP
   $IPT -A check_packets -p tcp --tcp-flags ALL ALL -j DROP
 # отбрасываем пакеты со сброшенными флагами син аск
   $IPT -A check_packets -p tcp --tcp-flags SYN,ACK SYN,ACK -m state --state NEW -j REJECT --reject-with tcp-reset
   # Запрет X-сканирования
   $IPT -A check_packets -m limit --limit 1/sec --limit-burst 10 -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j LOG --log-prefix "iptables: Stealth scan:"
   $IPT -A check_packets -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP
   # Запрет N-сканирования
   $IPT -A check_packets -m limit --limit 1/s --limit-burst 10 -p tcp --tcp-flags SYN,RST SYN,RST -j LOG --log-prefix "iptables: Stealth scan:"
   $IPT -A check_packets -p tcp --tcp-flags SYN,RST SYN,RST -j DROP
   $IPT -A check_packets -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP
   #Запрет FIN-сканирования
   $IPT -A check_packets -m limit --limit 1/s --limit-burst 10 -p tcp --tcp-flags FIN,ACK FIN -j LOG --log-prefix "iptables: Stealth scan:"
   $IPT -A check_packets -p tcp -m tcp --tcp-flags FIN,ACK FIN -j DROP
 # логируем и дропаем пакеты с ошибками
   $IPT -A check_packets -m state --state INVALID -j LOG --log-prefix "iptables: DROP INVALID PAK"
   $IPT -A check_packets -m state --state INVALID -j DROP
 # Дополнительно
   $IPT -A check_packets -p tcp -m tcp ! --tcp-flags FIN,SYN,RST,ACK SYN -m state --state NEW -j DROP
   $IPT -A check_packets -p tcp -m tcp --tcp-flags FIN,SYN,RST,PSH,ACK,URG FIN,SYN,RST,PSH,ACK,URG -j DROP
   $IPT -A check_packets -p tcp -m tcp --tcp-flags FIN,SYN,RST,PSH,ACK,URG NONE -j DROP
   $IPT -A check_packets -p tcp -m tcp --tcp-flags FIN,SYN,RST,PSH,ACK,URG SYN -m state --state ESTABLISHED -j DROP
 # Простая защита от DoS-атаки
   $IPT -A check_packets -p tcp -m tcp --tcp-flags SYN,ACK,FIN,RST RST -m limit --limit 1/s -j ACCEPT
   $IPT -A check_packets -p tcp --syn -j SYN_FLOOD
   ### 9: Limit RST packets ###
   $IPT -A check_packets -p tcp --tcp-flags RST RST -m limit --limit 2/s --limit-burst 2 -j ACCEPT
   $IPT -A check_packets -p tcp --tcp-flags RST RST -j DROP
   $IPT -A check_packets -j RETURN

# ====================================================================
# Syn flood
    $IPT -N SYN_FLOOD
    $IPT -A SYN_FLOOD -m limit --limit 2/s --limit-burst 6 -j RETURN
    $IPT -A SYN_FLOOD -j DROP

echo "END CHECK PACK"

# Черный список
    $IPT -N blacklist
    $IPT -F blacklist
    for i in `cat $PATH_FILES/${LIST_FILES[2]}`;
	do
	    $IPS -A sshban $i
    done
    $IPT -I blacklist -m set --match-set sshban src -j DROP
    for IP in `cat $PATH_FILES/${LIST_FILES[1]}`;  
	do
   	    PROV=`grep -o "#" <<<"$IP" | wc -l`; 
            if [ $PROV -eq 0 ]
            then
          	$IPT -A blacklist -s $IP -j DROP
            fi;
    done
    $IPT -A blacklist -j RETURN
echo "END BLACKLIST"

# Защита dns от ddos
    $IPT -N DNS_LIMIT
    $IPT -F DNS_LIMIT
    $IPT -A DNS_LIMIT -s 176.116.136.0/21 -j ACCEPT
    $IPT -A DNS_LIMIT -m recent --name dns_any --update --seconds 10 --hitcount 3 --rsource -j LOG --log-prefix "iptables: DNS DROP: "
    $IPT -A DNS_LIMIT -m recent --name dns_any --update --seconds 10 --hitcount 3 -j DROP
    $IPT -A DNS_LIMIT -m recent --name dns_any --set -j ACCEPT

# Входящие icmp запросы (пинг etc)
    $IPT -N icmp_in
    $IPT -F icmp_in
    $IPT -A icmp_in -p icmp -m state --state ESTABLISHED -j ACCEPT $RLIMIT
    $IPT -A icmp_in -p icmp -m state --state RELATED -j RELATED_ICMP $RLIMIT
    $IPT -A icmp_in -p icmp -f -j DROP
    $IPT -A icmp_in -p icmp -m limit --limit 1/s --limit-burst 2 -j ACCEPT
    $IPT -A icmp_in -p icmp -m limit --limit 1/s --limit-burst 2 -j LOG --log-prefix "iptables: Ping DROP: "
    $IPT -A icmp_in -m state --state NEW -m recent --set --name PING -p icmp --icmp-type 8 -j LOG --log-prefix "iptables: Ping detected: "
    $IPT -A icmp_in -m state --state NEW -p icmp --icmp-type 3 -j ACCEPT
    $IPT -A icmp_in -m state --state NEW -p icmp --icmp-type 8 -j ACCEPT
    $IPT -A icmp_in -m state --state NEW -p icmp --icmp-type 12 -j ACCEPT
    $IPT -A icmp_in -p icmp -m state --state NEW -j DROPLOG

# Цепочка лимитирования новых подключений по TCP
    $IPT -N tcp_limit
    $IPT -F tcp_limit
    $IPT -A tcp_limit -m conntrack --ctstate NEW -m limit --limit 60/sec --limit-burst 20 -j ACCEPT

# Цепочка проверки по MAC
    $IPT -N check_macs
    $IPT -F check_macs
#   $IPT -A check_macs -s ip-адрес -m mac --mac-source 00:00:00:00:00:00 -j RETURN
    $IPT -A check_macs -s 192.168.33.34 -m mac --mac-source 4c:0f:6e:45:e9:ef -j RETURN
    $IPT -A check_macs -j DROP
    
# Цепочка для ssh sshguard ## Блокировка адреса, если за 60 секунд он инициировал более 5-х соединений нужен модуль $MODPROBE ipt_recent
    $IPT -N sshguard
    $IPT -F sshguard
    $IPT -A sshguard -s $REZERV_IP -p tcp --dport $PORT_SSH -j ACCEPT
    $IPT -A sshguard -s $REZERV_IP2 -p tcp --dport $PORT_SSH -j ACCEPT
    $IPT -A sshguard -m state --state NEW -m recent --set --name SSH --rsource
    $IPT -A sshguard -m recent --rcheck --seconds 60 --hitcount 5 --rttl --name SSH --rsource -j LOG --log-prefix "iptables: Bruteforce SSH: "
    $IPT -A sshguard -m recent --rcheck --seconds 60 --hitcount 5 --rttl --name SSH --rsource -m recent --set --name SSHBRUT --rsource
    $IPT -A sshguard -m recent --rcheck --seconds 60 --hitcount 5 --rttl --name SSH --rsource -j REJECT
    $IPT -A sshguard -m recent --rcheck --name SSH --rsource -j LOG --log-prefix "iptables: SSH-connect: "
    $IPT -A sshguard -m recent --rcheck --name SSH --rsource -j ACCEPT
#    $IPT -A sshguard -j DROP

echo "END SSHGUARD"

# LOG packets, then ACCEPT.
    $IPT -N ACCEPTLOG
    $IPT -A ACCEPTLOG -j $LOG $RLIMIT --log-prefix "iptables: ACCEPT: "
    $IPT -A ACCEPTLOG -j ACCEPT

# LOG packets, then DROP.
    $IPT -N DROPLOG
    $IPT -A DROPLOG -j $LOG $RLIMIT --log-prefix "iptables: DROP: "
    $IPT -A DROPLOG -j DROP

# LOG packets, then REJECT.
# TCP packets are rejected with a TCP reset.
    $IPT -N REJECTLOG
    $IPT -A REJECTLOG -j $LOG $RLIMIT --log-prefix "iptables: REJECT: "
    $IPT -A REJECTLOG -p tcp -j REJECT --reject-with tcp-reset
    $IPT -A REJECTLOG -j REJECT
    
# Цепочка логирования 
    $IPT -N loggers
    $IPT -A loggers -m recent --rcheck --name SSH -m recent ! --rcheck --name SSHBRUT --rsource -j LOG --log-prefix "iptables: SSH-connect: "
    $IPT -A loggers -m recent --rcheck --name SSHBRUT --rsource -j LOG --log-prefix "iptables: Bruteforce SSH: "


# Цепочка IPSET sshban
    $IPS -N sshban iphash --hashsize 4096 --probes 2 --resize 50
    $IPS -F sshban

# Цепочка IPSET whitelist и  Цепочка белых(разрешенных) IP
    $IPS -N wlist iphash --hashsize 4096 --probes 2 --resize 50
    $IPS -F wlist
    for i in `cat $PATH_FILES/${LIST_FILES[0]}`;
	do
    	    $IPS -A wlist $i
    done
    $IPT -N whitelist
    $IPT -F whitelist
    $IPT -I whitelist -m set --match-set wlist src -j ACCEPT
    $IPT -A whitelist -j RETURN

# Цепочка statefull #
    $IPT -N statefull
    $IPT -F statefull
    $IPT -A statefull -m state --state ESTABLISHED,RELATED -j ACCEPT  
    
# Цепочка входящих из инета пакетов
    $IPT -N input_inet
    $IPT -F input_inet

# Цепочка входящих из локалки
    $IPT -N input_lan
    $IPT -F input_lan


echo "конец создания цепочек "

#################################################################################################
# НАСТРОЙКА ЦЕПОЧЕК ПРАВИЛ
#################################################################################################


############ Цепочки input_lan #########################################################
#  Настраиваем цепочку входящих из локальной сети
    $IPT -A input_lan -j statefull
    $IPT -A input_lan -p tcp -j check_packets
    $IPT -A input_lan -p icmp -j icmp_in
    $IPT -A input_lan -p tcp --dport $PORT_SSH -j sshguard
    # We don't care about Milkosoft, Drop SMB/CIFS/etc..
    $IPT -A input_lan -p tcp -m multiport --dports 135,137,138,139,445,1433,1434 -j DROP
    $IPT -A input_lan -p udp -m multiport --dports 135,137,138,139,445,1433,1434 -j DROP
    # open ports
    $IPT -A input_lan -p tcp -m multiport --dports ${MULTIPOTR_OPEN_TCP} -j ACCEPT
    $IPT -A input_lan -p udp -m multiport --dports ${MULTIPOTR_OPEN_UDP} -j ACCEPT
    #Zabbix agent
    $IPT -A input_lan -p tcp --dport 10050 -j ACCEPT
    #Zabbix server
    #$IPT -A input_lan -p tcp --dport 10051 -j ACCEPT
    # webmin
    #$IPT -A input_lan -p tcp --dport 10000 -j ACCEPT
    #http server
    #$IPT -A input_lan -p tcp -m multiport --dports ${HTTP_PORT} -j tcp_limit
    # DHCP
    #$IPT -A input_lan -p udp --dport ${PORT_DHCP} -j ACCEPT
    # DNS
    #$IPT -A input_lan -p tcp --dport ${PORT_DNS} -j ACCEPT
    #$IPT -A input_lan -p udp --dport ${PORT_DNS} -j ACCEPT
    $IPT -A input_lan -j REJECTLOG

echo "END input_lan"

####################################################################
# Цепочки input_inet  - Настраиваем цепочку входящих из интернета
    # Белый список
    $IPT -A input_inet -j whitelist
    # Чёрный список
    $IPT -A input_inet -j blacklist
    # уже установленные соединения
    $IPT -A input_inet -j statefull
    $IPT -A input_inet -p tcp -j check_packets
    $IPT -A input_inet -p icmp -j icmp_in
    $IPT -A input_inet -p tcp --dport $PORT_SSH -j sshguard
    # We don't care about Milkosoft, Drop SMB/CIFS/etc..
    $IPT -A input_inet -p tcp -m multiport --dports 135,137,138,139,445,1433,1434 -j DROP
    $IPT -A input_inet -p udp -m multiport --dports 135,137,138,139,445,1433,1434 -j DROP
    # open ports
    $IPT -A input_lan -p tcp -m multiport --dports ${MULTIPOTR_OPEN_TCP} -j ACCEPT
    $IPT -A input_lan -p udp -m multiport --dports ${MULTIPOTR_OPEN_UDP} -j ACCEPT   
    #openvpn 
    #$IPT -A input_inet -p udp --dport 5555 -j ACCEPT
    # http
    #$IPT -A input_inet -p tcp -m multiport --dports 80,443 -j tcp_limit
    # DHCP
    #$IPT -A input_lan -p udp --dport $PORT_DHCP -j ACCEPT
    # DNS
    #$IPT -A input_lan -p tcp --dport $PORT_DNS -j ACCEPT
    #$IPT -A input_inet -p udp --dport $PORT_DNS -j DNS_LIMIT   
    $IPT -A input_inet -j REJECTLOG 

echo "END INPUT INET"


#########################################################################
echo "Конец формирования цепочек"

#################################################################################################
# Задание правил для входящего трафика INPUT
#################################################################################################
# Направляем весь входящий трафик в цепочку
# из инета
    #$IPT -A INPUT -d $INET_IP1 -j input_inet
# из локалки
    $IPT -A INPUT -d $LAN_IP1 -j input_lan
# по умолчанию
    $IPT -P INPUT DROP
echo "END правил INPUT"

#################################################################################################
# Задание правил для исходящего трафика OUTPUT
#################################################################################################
$IPT -A OUTPUT -j statefull
$IPT -A OUTPUT -o $LO_IF -j ACCEPT
$IPT -A OUTPUT -o $LAN_IF1 -j ACCEPT
#$IPT -A OUTPUT -o $INET_IF1 -j ACCEPT
$IPT -A OUTPUT -j REJECTLOG

echo "END правил OUTPUT"


#################################################################################################
# Задание правил для сквозного траффика FORWARD
#################################################################################################

# разрешаем стандартные маршруты
    $IPT -A FORWARD -j statefull
    $IPT -A FORWARD -p tcp -j check_packets
    $IPT -A FORWARD -p icmp -j icmp_in
    #$IPT -A FORWARD -s 10.11.12.10 -d 192.168.1.250  -j ACCEPT
    #$IPT -A FORWARD -s 10.11.12.10 -j REJECT
# локальная сеть 
    #$IPT -A FORWARD -s $LAN_IP1 -d $LAN_IP2 -j ACCEPT
    #$IPT -A FORWARD -s $LAN_IP2 -d $LAN_IP1 -j ACCEPT
    $IPT -A FORWARD -j DROP
    # или
    #$IPT -A FORWARD -j REJECTLOG

echo "END FORWARD"

# Явно регистрируйте и отклоняйте все остальное.
# ------------------------------------------------- -----------------------------
# Используйте REJECT вместо REJECTLOG, если вам не нужно / не нужно вести журнал.

#################################################################################################
# СОХРАНЕНИЕ И ОТПРАВКА ОТЧЕТА ПО ПОЧТЕ
#################################################################################################
#Сохраняем iptables centos
{% if ansible_distribution  == 'CentOS' %}
iptables-save > /etc/sysconfig/iptables
ipset save > /etc/sysconfig/ipset
ipset save > /etc/ipset/ipset
{% endif %}

# debian ubuntu
#iptub# iptables-save > /etc/iptables/iptables
#iptub# ipset save > /etc/iptables/ipset
{% if ansible_distribution == 'Ubuntu' %}
iptables-save > /etc/iptables/rules.v4
ip6tables-save > /etc/iptables/rules.v6
ipset save > /etc/iptables/ipsets
/usr/sbin/netfilter-persistent save
{% endif %}
# можно в /etc/network/interfaces добавить после интерфейса
#post-up /sbin/iptables-restore < /etc/iptables/iptables
#post-up /sbin/ipset restore < /etc/iptables/ipsets


# сохраняем результат 
iptables -L -v -n --line-number > /scripts/ipt.txt
iptables -L -v -n -t nat --line-number > /scripts/ipt-nat.txt
echo "exit"
exit;


